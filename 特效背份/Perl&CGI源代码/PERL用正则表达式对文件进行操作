undef $/;

$line = ;

if ($line =~ /(b.*grass)$/) {

print "found $1\n";

}
 

如果把我们的文件填入如下内容： browngrass

bluegrass

则输出为：

found bluegrass

它没有找到“browngrass”，这是因为$ 仅在串尾寻找其匹配， (或者在串结束 前的一行)。如果在包含很多行的串中，用"^" 和"$"来匹配，, 我们可以使用 /m ("multiline") 选项：

if ($line =~ /(b.*grass)$/m) {}

现在程序会把如下的信息输出：

found browngrass

类似地，句点可以匹配除了换行符之外的所有字符：

while () {

if (/19(.*)$/) {

if ($1 < 20) {

$year = 2000+$1;

} else {

$year = 1900+$1;

}

}

}
 

如果我们从文件中读入“1981”，$_ 将包含“1981\n”。正则表达式中的句点 匹配“8”和“1”, 而不匹配“\n”。这里正需要这样做，因为换行符不是日期的组成部分。

对于一个包含很多行的串，我们也许要提取其中的大的块，这些块可能会跨越行分隔符。 在这种情况下，我们可以使用 /s 选项，并用句点来匹配除了换行符以外的所有字符。

if (m{(.*?)}s) {

print "Found bold text: $1\n";

}
 

此处，我用了{}来表示正则表达式的起始和结束，而不用斜杠，所以，我就可以 告诉 Perl我正在匹配，起始字符为"m"，结束字符为"s"。你 可以把/s 和/m 选项组合使用：

if (m{^(.*?)}sm) {

# ...

}
 
